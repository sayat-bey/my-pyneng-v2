# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""


ip_mask = input("Enter IP address (10.1.1.0/24): ")

ip, mask = ip_mask.split("/")
oc1, oc2, oc3, oc4 = ip.split(".")
ipbin = f"{int(oc1):08b}{int(oc2):08b}{int(oc3):08b}{int(oc4):08b}"

networkbin = ipbin[0:int(mask)] + "0"*(32-int(mask))
ip1 = networkbin[0:8]
ip2 = networkbin[8:16]
ip3 = networkbin[16:24]
ip4 = networkbin[24:]

maskb = "1"*int(mask) + "0"*(32-int(mask))
mask1 = maskb[0:8]
mask2 = maskb[8:16]
mask3 = maskb[16:24]
mask4 = maskb[24:]

result = f'''
Network:
{int(ip1,2):<10}{int(ip2,2):<10}{int(ip3,2):<10}{int(ip4,2):<10}
{ip1:10}{ip2:10}{ip3:10}{ip4:10}

Mask:
/{mask}
{int(mask1,2):<10}{int(mask2,2):<10}{int(mask3,2):<10}{int(mask4,2):<10}
{mask1:10}{mask2:10}{mask3:10}{mask4:10}
'''




print(result)